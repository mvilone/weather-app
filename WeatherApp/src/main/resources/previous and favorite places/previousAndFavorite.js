// Import the functions you need from the SDKs you need
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
import {getDatabase, ref} from "firebase/database"
import {get, query, onValue} from "firebase/database"
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries
// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
var firebaseConfig = {
  apiKey: "<REMOVED>",
  authDomain: "weatherapp-bb11c.firebaseapp.com",
  databaseURL: "https://weatherapp-bb11c-default-rtdb.firebaseio.com",
  projectId: "weatherapp-bb11c",
  storageBucket: "weatherapp-bb11c.appspot.com",
  messagingSenderId: "770085319311",
  appId: "1:770085319311:web:e64c780a6619418f21b6fa",
  measurementId: "G-S452XRH8M6",
};

// Initialize app
const app = initializeApp(firebaseConfig);
//initialize database instance and reference
const db = getDatabase(app);
/**
 * This function will take unique UserId generated by Firebase for every new user,
 * and a string of favorite places as input and generates new refernces in 
 * Firebase's Realtime database JSON tree
 * @param {*} UserId the unique ID of users created by firebase upon authentication
 * @param {*} favoritePlaces string of favorite places stored by users. (Would need to find a way to retrieve from front end)
 */
function storeFavoritePlaces(UserId, favoritePlaces){
  var setFavPlaceRef = firebase.database().ref('Users/UserId' + UserId); //variable refernce to Unique user ID set by Firebase
  
  //update favprite places node for the user
  setFavPlaceRef.child('favorite places').set(favoritePlaces).then(function(){
    console.log('Favorite places stored successfully!');
  }).catch(function(error){
    console.error('Error storing favorite place', error);
  })

  //TODO: Figure out how to retrieve favorite places from front end to populate array
}

/**
 * This function will take the user's unique ID generated by firebase and an 
 * array of previously searched places as input, and pushes user search history data
 * into the 'searched places' node of the Realtime Database JSON Tree.
 * @param {*} UserId the unique ID of users created by firebase upon authentication
 * @param {*} searchedPlaces string of favorite places stored by users. (Would need to find a way to retrieve from front end)
 */
function storeSearchedPlaces(UserId, searchedPlaces){
  var setSearchedPlacesRef = firebase.database().ref('/Users/UserId' + UserId);

  //push searched places to create a new searched places entry for the user with input UserID
  setSearchedPlacesRef.child('searched places').push(searchedPlaces).then(function(){
    console.log("Searched place stored successfully");
  }).catch(function(error){
    console.error('Error storing searched places', + error)
  })
  //TODO: Figure out how to retrieve searched places from hash map to populate array
}

//example use
var users = {
  "0Uy14yrbfLNvmgdtMQ8WduSAa823":{
    "favorite places": "Paris, New York, Tokyo",
    "searched places": "Paris, New York, Tokyo, London, Sydney"
  },
  "DEExLrJwVCQQgDocF7kN6ZTOdij2":{
    "favorite places": "Istanbul, Morocco, Mumbai, London",
    "searched places": "Istanbul, Morocco, Mumbai, London, Abu Dhabi, Houston" 
  },
  "SNTHWKenVRbF0Ymzw7EJNXl6LUX2":{
    "favorite places": "Berlin, Rome",
    "searched places": "Berlin, Rome, Istanbul, Morocco, Mumbai, London, Abu Dhabi, Houston" 
  },
  "xlwlko5zRyQOlpyO5lmRyRlgEEo1":{
    "favorite places": "Los Angeles, Las Vegas, Seattle, CHicago, Washington D.C, Boston",
    "searched places": "Los Angeles, Las Vegas, Seattle, CHicago, Washington D.C, Boston, Houston" 
  }, 
};

//Loop through the users object and store their favorite and searched places
for (var UserId in users){
  if(users.hasOwnProperty(UserId)){
    var userData = users[UserId];
    storeFavoritePlaces(UserId, userData['favorite places']);

    var searchedPlacesArray = userData['searched places'].split(', ');
    searchedPlacesArray.forEach(function(searchedPlaces){
      storeSearchedPlaces(UserId, searchedPlaces);
    });
  }
}
